# ai_utils.py
import torch
import torch.nn as nn
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.preprocessing import LabelEncoder
import joblib

class TaskPriorityModel(nn.Module):
    def __init__(self, input_size, num_classes):
        super(TaskPriorityModel, self).__init__()
        self.fc1 = nn.Linear(input_size, 128)
        self.relu = nn.ReLU()
        self.fc2 = nn.Linear(128, num_classes)

    def forward(self, x):
        out = self.fc1(x)
        out = self.relu(out)
        out = self.fc2(out)
        return out

# Load the vectorizer and label encoder
vectorizer = joblib.load('vectorizer.joblib')
label_encoder = joblib.load('label_encoder.joblib')

input_size = len(vectorizer.get_feature_names_out())
num_classes = len(label_encoder.classes_)

# Initialize and load the trained model
model = TaskPriorityModel(input_size, num_classes)
model.load_state_dict(torch.load('model.pth'))
model.eval()

def get_task_priority(description):
    X = vectorizer.transform([description]).toarray()
    X_tensor = torch.tensor(X, dtype=torch.float32)
    with torch.no_grad():
        outputs = model(X_tensor)
        _, predicted = torch.max(outputs.data, 1)
        priority = label_encoder.inverse_transform(predicted.numpy())
    return priority[0]
